import React, {useState, useEffect} from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ViewStyle,
  ActivityIndicator,
  Animated,
} from 'react-native';
import {GoTheme} from '../theme/GoTheme';
import {useTheme} from '../contexts/ThemeContext';

export interface BookingProgressFlowProps {
  // ‰∫àÁ¥Ñ„Çø„Ç§„Éó
  bookingType: 'taxi' | 'ship';
  
  // ÁèæÂú®„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó
  currentStep: BookingStep;
  
  // ‰∫àÁ¥Ñ„Éá„Éº„Çø
  bookingData?: {
    id?: string;
    pickupLocation?: string;
    destinationLocation?: string;
    estimatedTime?: string;
    fare?: number;
    driverName?: string;
    vehicleInfo?: string;
    vesselName?: string;
    departureTime?: string;
  };
  
  // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØ
  onCancel?: () => void;
  onContactDriver?: () => void;
  onRateService?: (rating: number) => void;
  
  // „Çπ„Çø„Ç§„É´
  style?: ViewStyle;
}

export type BookingStep = 
  | 'searching' 
  | 'matched' 
  | 'pickup' 
  | 'enroute' 
  | 'arrived' 
  | 'completed';

interface StepConfig {
  title: string;
  description: string;
  icon: string;
  showCancel?: boolean;
  showContact?: boolean;
  showRating?: boolean;
  autoProgress?: boolean;
}

export const BookingProgressFlow: React.FC<BookingProgressFlowProps> = ({
  bookingType,
  currentStep,
  bookingData,
  onCancel = () => {},
  onContactDriver = () => {},
  onRateService = () => {},
  style,
}) => {
  const {currentMode, getAccentColor} = useTheme();
  const [animationValue] = useState(new Animated.Value(0));
  const [rating, setRating] = useState<number>(0);

  // „Çπ„ÉÜ„ÉÉ„ÉóË®≠ÂÆö
  const stepConfigs: Record<BookingStep, StepConfig> = {
    searching: {
      title: `${bookingType === 'ship' ? 'ËàπËà∂' : '„Çø„ÇØ„Ç∑„Éº'}„ÇíÊé¢„Åó„Å¶„ÅÑ„Åæ„Åô`,
      description: `ÊúÄÈÅ©„Å™${bookingType === 'ship' ? '‰æø' : '„Éâ„É©„Ç§„Éê„Éº'}„ÇíÊ§úÁ¥¢‰∏≠„Åß„Åô...`,
      icon: 'üîç',
      showCancel: true,
      autoProgress: true,
    },
    matched: {
      title: `${bookingType === 'ship' ? 'ËàπËà∂' : '„Éâ„É©„Ç§„Éê„Éº'}„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„ÅüÔºÅ`,
      description: bookingType === 'ship' 
        ? `${bookingData?.vesselName || 'ËàπËà∂'}„ÅÆ‰∫àÁ¥Ñ„ÅåÁ¢∫ÂÆö„Åó„Åæ„Åó„Åü`
        : `${bookingData?.driverName || '„Éâ„É©„Ç§„Éê„Éº'}„Åå„ÅäËøé„Åà„Å´Âêë„Åã„Å£„Å¶„ÅÑ„Åæ„Åô`,
      icon: bookingType === 'ship' ? 'üö¢' : 'üöó',
      showCancel: true,
      showContact: bookingType === 'taxi',
    },
    pickup: {
      title: bookingType === 'ship' ? 'Ê∏Ø„Åß„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ' : '„ÅäËøé„Åà„Å´Âêë„Åã„Å£„Å¶„ÅÑ„Åæ„Åô',
      description: bookingType === 'ship' 
        ? `${bookingData?.departureTime || 'Âá∫Áô∫ÊôÇÂàª'}„ÅÆ15ÂàÜÂâç„Åæ„Åß„Å´Ê∏Ø„Å´„ÅäË∂ä„Åó„Åè„Å†„Åï„ÅÑ`
        : `${bookingData?.estimatedTime || 'Á¥Ñ5ÂàÜ'}„Åß„ÅäËøé„Åà„Å´Âà∞ÁùÄ‰∫àÂÆö„Åß„Åô`,
      icon: bookingType === 'ship' ? '‚öì' : 'üìç',
      showCancel: true,
      showContact: bookingType === 'taxi',
    },
    enroute: {
      title: bookingType === 'ship' ? 'Ëà™Ë°å‰∏≠' : 'ÁõÆÁöÑÂú∞„Å∏Âêë„Åã„Å£„Å¶„ÅÑ„Åæ„Åô',
      description: bookingType === 'ship'
        ? 'ÂÆâÂÖ®„Å™Ëà™Êµ∑„Çí„ÅäÊ•Ω„Åó„Åø„Åè„Å†„Åï„ÅÑ'
        : 'ÁõÆÁöÑÂú∞„Åæ„ÅßÂÆâÂÖ®ÈÅãËª¢„Åß„ÅäÈÄÅ„Çä„Åó„Åæ„Åô',
      icon: bookingType === 'ship' ? 'üåä' : 'üõ£Ô∏è',
      showContact: true,
    },
    arrived: {
      title: bookingType === 'ship' ? 'Âà∞ÁùÄ„Åó„Åæ„Åó„Åü' : 'ÁõÆÁöÑÂú∞„Å´Âà∞ÁùÄ',
      description: bookingType === 'ship'
        ? '„ÅäÁñ≤„ÇåÊßò„Åß„Åó„Åü„ÄÇÈôçËàπ„ÅÆÊ∫ñÂÇô„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô'
        : 'ÁõÆÁöÑÂú∞„Å´Âà∞ÁùÄ„Åó„Åæ„Åó„Åü„ÄÇ„ÅäÁñ≤„ÇåÊßò„Åß„Åó„Åü',
      icon: bookingType === 'ship' ? 'üèñÔ∏è' : 'üéØ',
    },
    completed: {
      title: '„ÅîÂà©Áî®„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„Åü',
      description: '„Çµ„Éº„Éì„Çπ„ÅÆË©ï‰æ°„Çí„ÅäËÅû„Åã„Åõ„Åè„Å†„Åï„ÅÑ',
      icon: '‚úÖ',
      showRating: true,
    },
  };

  const currentConfig = stepConfigs[currentStep];

  // „Çπ„ÉÜ„ÉÉ„ÉóÂ§âÊõ¥ÊôÇ„ÅÆ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
  useEffect(() => {
    Animated.sequence([
      Animated.timing(animationValue, {
        toValue: 0,
        duration: 150,
        useNativeDriver: true,
      }),
      Animated.timing(animationValue, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true,
      }),
    ]).start();
  }, [currentStep]);

  // Ëá™ÂãïÈÄ≤Ë°å„Çπ„ÉÜ„ÉÉ„Éó„ÅÆÂá¶ÁêÜ
  useEffect(() => {
    if (currentConfig.autoProgress) {
      // ÂÆüÈöõ„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅWebSocket„ÇÑAPI„Éù„Éº„É™„É≥„Ç∞„Åß„Çπ„ÉÜ„ÉÉ„ÉóÊõ¥Êñ∞„ÇíÂèó‰ø°
      const timer = setTimeout(() => {
        // onStepChange?.('matched'); // Ë¶™„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅßÂá¶ÁêÜ
      }, 3000);
      
      return () => clearTimeout(timer);
    }
  }, [currentStep, currentConfig.autoProgress]);

  const renderStars = () => {
    return (
      <View style={styles.starsContainer}>
        {[1, 2, 3, 4, 5].map((star) => (
          <TouchableOpacity
            key={star}
            onPress={() => {
              setRating(star);
              setTimeout(() => onRateService(star), 500);
            }}
            activeOpacity={0.7}>
            <Text style={[
              styles.star,
              {color: star <= rating ? '#FFD700' : '#E2E8F0'}
            ]}>
              ‚òÖ
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    );
  };

  const renderProgressIndicator = () => {
    const steps: BookingStep[] = ['searching', 'matched', 'pickup', 'enroute', 'arrived', 'completed'];
    const currentIndex = steps.indexOf(currentStep);
    
    return (
      <View style={styles.progressContainer}>
        {steps.map((step, index) => (
          <View key={step} style={styles.progressStep}>
            <View style={[
              styles.progressDot,
              {
                backgroundColor: index <= currentIndex ? getAccentColor() : '#E2E8F0',
              }
            ]} />
            {index < steps.length - 1 && (
              <View style={[
                styles.progressLine,
                {
                  backgroundColor: index < currentIndex ? getAccentColor() : '#E2E8F0',
                }
              ]} />
            )}
          </View>
        ))}
      </View>
    );
  };

  return (
    <Animated.View 
      style={[
        styles.container, 
        style,
        {
          opacity: animationValue,
          transform: [{
            translateY: animationValue.interpolate({
              inputRange: [0, 1],
              outputRange: [20, 0],
            }),
          }],
        }
      ]}>
      
      {/* „Éó„É≠„Ç∞„É¨„Çπ „Ç§„É≥„Éá„Ç£„Ç±„Éº„Çø„Éº */}
      {renderProgressIndicator()}
      
      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <View style={styles.content}>
        
        {/* „Ç¢„Ç§„Ç≥„É≥ */}
        <View style={styles.iconContainer}>
          <Text style={styles.stepIcon}>{currentConfig.icon}</Text>
          {currentConfig.autoProgress && (
            <ActivityIndicator 
              size="small" 
              color={getAccentColor()} 
              style={styles.loadingIndicator}
            />
          )}
        </View>
        
        {/* „Çø„Ç§„Éà„É´„ÉªË™¨Êòé */}
        <Text style={styles.title}>{currentConfig.title}</Text>
        <Text style={styles.description}>{currentConfig.description}</Text>
        
        {/* ‰∫àÁ¥ÑË©≥Á¥∞ */}
        {bookingData && (
          <View style={styles.detailsContainer}>
            {bookingData.pickupLocation && (
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>‰πóËªäÂú∞:</Text>
                <Text style={styles.detailValue}>{bookingData.pickupLocation}</Text>
              </View>
            )}
            
            {bookingData.destinationLocation && (
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>ÁõÆÁöÑÂú∞:</Text>
                <Text style={styles.detailValue}>{bookingData.destinationLocation}</Text>
              </View>
            )}
            
            {bookingData.fare && (
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>ÊñôÈáë:</Text>
                <Text style={[styles.detailValue, styles.fareValue]}>
                  ¬•{bookingData.fare.toLocaleString()}
                </Text>
              </View>
            )}
            
            {bookingData.driverName && bookingType === 'taxi' && (
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>„Éâ„É©„Ç§„Éê„Éº:</Text>
                <Text style={styles.detailValue}>{bookingData.driverName}</Text>
              </View>
            )}
            
            {bookingData.vehicleInfo && bookingType === 'taxi' && (
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Ëªä‰∏°:</Text>
                <Text style={styles.detailValue}>{bookingData.vehicleInfo}</Text>
              </View>
            )}
            
            {bookingData.vesselName && bookingType === 'ship' && (
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>ËàπËà∂:</Text>
                <Text style={styles.detailValue}>{bookingData.vesselName}</Text>
              </View>
            )}
            
            {bookingData.departureTime && bookingType === 'ship' && (
              <View style={styles.detailRow}>
                <Text style={styles.detailLabel}>Âá∫Áô∫:</Text>
                <Text style={styles.detailValue}>{bookingData.departureTime}</Text>
              </View>
            )}
          </View>
        )}
        
        {/* Ë©ï‰æ° */}
        {currentConfig.showRating && (
          <View style={styles.ratingContainer}>
            <Text style={styles.ratingLabel}>„Çµ„Éº„Éì„Çπ„ÅÆË©ï‰æ°</Text>
            {renderStars()}
            {rating > 0 && (
              <Text style={styles.ratingThank}>Ë©ï‰æ°„ÅÑ„Åü„Å†„Åç„ÄÅ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„ÅüÔºÅ</Text>
            )}
          </View>
        )}
        
        {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
        <View style={styles.actionContainer}>
          
          {currentConfig.showContact && (
            <TouchableOpacity 
              style={[styles.actionButton, styles.contactButton]}
              onPress={onContactDriver}
              activeOpacity={0.8}>
              <Text style={styles.contactButtonText}>
                {bookingType === 'ship' ? 'ËàπËà∂„Å´ÈÄ£Áµ°' : '„Éâ„É©„Ç§„Éê„Éº„Å´ÈÄ£Áµ°'}
              </Text>
            </TouchableOpacity>
          )}
          
          {currentConfig.showCancel && (
            <TouchableOpacity 
              style={[styles.actionButton, styles.cancelButton]}
              onPress={onCancel}
              activeOpacity={0.8}>
              <Text style={styles.cancelButtonText}>„Ç≠„É£„É≥„Çª„É´</Text>
            </TouchableOpacity>
          )}
        </View>
        
      </View>
    </Animated.View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: GoTheme.colors.surface,
    borderRadius: GoTheme.borderRadius.xl,
    padding: GoTheme.spacing.lg,
    margin: GoTheme.spacing.md,
    ...GoTheme.shadows.sheet,
    borderWidth: 1,
    borderColor: GoTheme.colors.border,
  },
  
  // „Éó„É≠„Ç∞„É¨„Çπ „Ç§„É≥„Éá„Ç£„Ç±„Éº„Çø„Éº
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: GoTheme.spacing.lg,
  },
  
  progressStep: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  
  progressDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
  },
  
  progressLine: {
    width: 24,
    height: 2,
    marginHorizontal: 4,
  },
  
  // „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ
  content: {
    alignItems: 'center',
  },
  
  iconContainer: {
    position: 'relative',
    marginBottom: GoTheme.spacing.md,
  },
  
  stepIcon: {
    fontSize: 48,
    textAlign: 'center',
  },
  
  loadingIndicator: {
    position: 'absolute',
    bottom: -8,
    right: -8,
  },
  
  title: {
    ...GoTheme.typography.h3,
    fontSize: 20,
    fontWeight: '700',
    color: GoTheme.colors.text,
    textAlign: 'center',
    marginBottom: GoTheme.spacing.sm,
  },
  
  description: {
    ...GoTheme.typography.body,
    fontSize: 14,
    color: GoTheme.colors.textSecondary,
    textAlign: 'center',
    marginBottom: GoTheme.spacing.lg,
    lineHeight: 20,
  },
  
  // Ë©≥Á¥∞ÊÉÖÂ†±
  detailsContainer: {
    width: '100%',
    backgroundColor: GoTheme.colors.background,
    borderRadius: GoTheme.borderRadius.lg,
    padding: GoTheme.spacing.md,
    marginBottom: GoTheme.spacing.lg,
    borderWidth: 1,
    borderColor: GoTheme.colors.border,
    ...GoTheme.shadows.small,
  },
  
  detailRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: GoTheme.spacing.xs,
  },
  
  detailLabel: {
    ...GoTheme.typography.body,
    fontSize: 13,
    color: GoTheme.colors.textSecondary,
    fontWeight: '500',
  },
  
  detailValue: {
    ...GoTheme.typography.body,
    fontSize: 13,
    color: GoTheme.colors.text,
    fontWeight: '600',
    flex: 1,
    textAlign: 'right',
  },
  
  fareValue: {
    color: GoTheme.colors.primary,
    fontSize: 15,
    fontWeight: '700',
  },
  
  // Ë©ï‰æ°
  ratingContainer: {
    alignItems: 'center',
    marginBottom: GoTheme.spacing.lg,
  },
  
  ratingLabel: {
    ...GoTheme.typography.body,
    fontSize: 14,
    color: GoTheme.colors.text,
    fontWeight: '600',
    marginBottom: GoTheme.spacing.sm,
  },
  
  starsContainer: {
    flexDirection: 'row',
    marginBottom: GoTheme.spacing.sm,
  },
  
  star: {
    fontSize: 32,
    marginHorizontal: GoTheme.spacing.xs,
  },
  
  ratingThank: {
    ...GoTheme.typography.caption,
    fontSize: 12,
    color: GoTheme.colors.primary,
    fontWeight: '500',
    fontStyle: 'italic',
  },
  
  // „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥
  actionContainer: {
    width: '100%',
    gap: GoTheme.spacing.sm,
  },
  
  actionButton: {
    borderRadius: GoTheme.borderRadius.lg,
    paddingVertical: GoTheme.spacing.lg,
    paddingHorizontal: GoTheme.spacing.lg,
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: GoTheme.go.buttonHeight.large,
    ...GoTheme.shadows.pill,
  },
  
  contactButton: {
    backgroundColor: GoTheme.colors.primary,
  },
  
  contactButtonText: {
    ...GoTheme.typography.button,
    color: GoTheme.colors.textOnPrimary,
    fontSize: 16,
    fontWeight: 'bold',
  },
  
  cancelButton: {
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: GoTheme.colors.error,
  },
  
  cancelButtonText: {
    ...GoTheme.typography.button,
    color: GoTheme.colors.error,
    fontSize: 16,
    fontWeight: '600',
  },
});