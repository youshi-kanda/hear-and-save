import React, {useState, useEffect, useCallback} from 'react';
import {
  View,
  Text,
  StyleSheet,
  SafeAreaView,
  ScrollView,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  TextInput,
  RefreshControl,
} from 'react-native';
import {GoButton, GoCard, GoHeader} from '../components/GoStyle';
import {GoTheme} from '../theme/GoTheme';
import {locationService, SavedLocation, LocationSearchResult} from '../services/api/locationService';

export interface FavoriteLocationsScreenProps {
  navigation: any;
}

interface LocationFormData {
  name: string;
  address: string;
  latitude: number;
  longitude: number;
  type: 'home' | 'work' | 'favorite';
  icon: string;
}

export const FavoriteLocationsScreen: React.FC<FavoriteLocationsScreenProps> = ({navigation}) => {
  const [locations, setLocations] = useState<SavedLocation[]>([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [showAddForm, setShowAddForm] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<LocationSearchResult[]>([]);
  const [searchLoading, setSearchLoading] = useState(false);
  
  const [formData, setFormData] = useState<LocationFormData>({
    name: '',
    address: '',
    latitude: 0,
    longitude: 0,
    type: 'favorite',
    icon: 'üìç',
  });

  const [errors, setErrors] = useState<{[key: string]: string}>({});

  // Â†¥ÊâÄ‰∏ÄË¶ßÂèñÂæó
  const loadLocations = useCallback(async () => {
    try {
      const response = await locationService.getSavedLocations();
      
      if (response.success && response.data) {
        // „Çø„Ç§„ÉóÂà•„Å´„ÇΩ„Éº„Éà
        const sortedLocations = response.data.sort((a, b) => {
          const typeOrder = {'home': 0, 'work': 1, 'favorite': 2, 'recent': 3};
          if (a.type !== b.type) {
            return typeOrder[a.type] - typeOrder[b.type];
          }
          return b.usage_count - a.usage_count;
        });
        setLocations(sortedLocations);
      } else {
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®„É¢„ÉÉ„ÇØ„Éá„Éº„Çø
        setLocations([
          {
            id: '1',
            name: 'Ëá™ÂÆÖ',
            address: 'Êù±‰∫¨ÈÉΩÊ∏ØÂå∫ÈùíÂ±±1-1-1',
            latitude: 35.6762,
            longitude: 139.7533,
            type: 'home',
            icon: 'üè†',
            usage_count: 25,
            is_primary: true,
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z',
            last_used: '2024-01-15T10:00:00Z',
          },
          {
            id: '2',
            name: 'ËÅ∑Â†¥',
            address: 'Êù±‰∫¨ÈÉΩÂçÉ‰ª£Áî∞Âå∫‰∏∏„ÅÆÂÜÖ1-1-1',
            latitude: 35.6812,
            longitude: 139.7671,
            type: 'work',
            icon: 'üè¢',
            usage_count: 30,
            is_primary: true,
            created_at: '2024-01-01T00:00:00Z',
            updated_at: '2024-01-01T00:00:00Z',
            last_used: '2024-01-14T18:00:00Z',
          },
          {
            id: '3',
            name: '„Çà„ÅèË°å„Åè„Ç´„Éï„Çß',
            address: 'Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫Ë°®ÂèÇÈÅì5-5-5',
            latitude: 35.6654,
            longitude: 139.7107,
            type: 'favorite',
            icon: '‚òï',
            usage_count: 12,
            is_primary: false,
            created_at: '2024-01-05T00:00:00Z',
            updated_at: '2024-01-05T00:00:00Z',
            last_used: '2024-01-12T15:00:00Z',
          },
        ]);
      }
    } catch (error) {
      console.error('Locations loading error:', error);
      Alert.alert('„Ç®„É©„Éº', 'Â†¥ÊâÄ„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
    }
  }, []);

  const loadData = useCallback(async () => {
    setLoading(true);
    await loadLocations();
    setLoading(false);
  }, [loadLocations]);

  const handleRefresh = useCallback(async () => {
    setRefreshing(true);
    await loadLocations();
    setRefreshing(false);
  }, [loadLocations]);

  useEffect(() => {
    loadData();
  }, [loadData]);

  // Â†¥ÊâÄÊ§úÁ¥¢
  const handleSearch = async (query: string) => {
    if (query.length < 2) {
      setSearchResults([]);
      return;
    }

    setSearchLoading(true);
    try {
      const response = await locationService.searchLocations({
        query,
        limit: 10,
      });

      if (response.success && response.data) {
        setSearchResults(response.data);
      } else {
        setSearchResults([]);
      }
    } catch (error) {
      console.error('Search error:', error);
      setSearchResults([]);
    } finally {
      setSearchLoading(false);
    }
  };

  // Ê§úÁ¥¢ÁµêÊûúÈÅ∏Êäû
  const handleSearchResultSelect = (result: LocationSearchResult) => {
    setFormData({
      name: result.name,
      address: result.address,
      latitude: result.latitude,
      longitude: result.longitude,
      type: 'favorite',
      icon: getIconForPlaceType(result.place_type),
    });
    setSearchResults([]);
    setSearchQuery(result.name);
  };

  // Â†¥ÊâÄ‰øùÂ≠ò
  const handleSaveLocation = async () => {
    if (!validateForm()) {
      return;
    }

    try {
      const response = await locationService.saveLocation({
        name: formData.name.trim(),
        address: formData.address.trim(),
        latitude: formData.latitude,
        longitude: formData.longitude,
        type: formData.type,
        icon: formData.icon,
      });

      if (response.success) {
        Alert.alert('ÊàêÂäü', 'Â†¥ÊâÄ„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
        setShowAddForm(false);
        resetForm();
        loadLocations();
      } else {
        Alert.alert('„Ç®„É©„Éº', response.error || 'Â†¥ÊâÄ„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
      }
    } catch (error) {
      console.error('Save location error:', error);
      Alert.alert('„Ç®„É©„Éº', 'Â†¥ÊâÄ„ÅÆ‰øùÂ≠ò‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
    }
  };

  // „Éï„Ç©„Éº„É†„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
  const validateForm = (): boolean => {
    const newErrors: {[key: string]: string} = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Â†¥ÊâÄÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
    }

    if (!formData.address.trim()) {
      newErrors.address = '‰ΩèÊâÄ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // „Éï„Ç©„Éº„É†„É™„Çª„ÉÉ„Éà
  const resetForm = () => {
    setFormData({
      name: '',
      address: '',
      latitude: 0,
      longitude: 0,
      type: 'favorite',
      icon: 'üìç',
    });
    setSearchQuery('');
    setSearchResults([]);
    setErrors({});
  };

  // Â†¥ÊâÄÂâäÈô§
  const handleDeleteLocation = (location: SavedLocation) => {
    Alert.alert(
      'Â†¥ÊâÄ„ÇíÂâäÈô§',
      `„Äå${location.name}„Äç„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü`,
      [
        { text: '„Ç≠„É£„É≥„Çª„É´', style: 'cancel' },
        {
          text: 'ÂâäÈô§',
          style: 'destructive',
          onPress: async () => {
            try {
              const response = await locationService.deleteLocation(location.id);
              
              if (response.success) {
                Alert.alert('ÊàêÂäü', 'Â†¥ÊâÄ„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü');
                loadLocations();
              } else {
                Alert.alert('„Ç®„É©„Éº', response.error || 'Â†¥ÊâÄ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
              }
            } catch (error) {
              Alert.alert('„Ç®„É©„Éº', 'Â†¥ÊâÄ„ÅÆÂâäÈô§‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
            }
          }
        }
      ]
    );
  };

  // „É°„Ç§„É≥Â†¥ÊâÄË®≠ÂÆöÔºà„Éõ„Éº„É†„ÉªËÅ∑Â†¥Ôºâ
  const handleSetPrimary = async (location: SavedLocation) => {
    if (location.type === 'home' || location.type === 'work') {
      try {
        const response = await locationService.setPrimaryLocation(location.id, location.type);
        
        if (response.success) {
          Alert.alert('ÊàêÂäü', '„É°„Ç§„É≥Â†¥ÊâÄ„ÇíË®≠ÂÆö„Åó„Åæ„Åó„Åü');
          loadLocations();
        } else {
          Alert.alert('„Ç®„É©„Éº', response.error || '„É°„Ç§„É≥Â†¥ÊâÄ„ÅÆË®≠ÂÆö„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
      } catch (error) {
        Alert.alert('„Ç®„É©„Éº', '„É°„Ç§„É≥Â†¥ÊâÄ„ÅÆË®≠ÂÆö‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
      }
    }
  };

  // Â†¥ÊâÄÈÅ∏ÊäûÔºà‰∫àÁ¥Ñ„Åß‰ΩøÁî®Ôºâ
  const handleUseLocation = async (location: SavedLocation) => {
    try {
      // ‰ΩøÁî®ÂõûÊï∞„ÇíÊõ¥Êñ∞
      await locationService.incrementLocationUsage(location.id);
      
      // Âëº„Å≥Âá∫„ÅóÂÖÉ„ÅÆÁîªÈù¢„Å´„Éá„Éº„Çø„ÇíËøî„Åô
      navigation.navigate('TaxiBooking', {
        selectedLocation: {
          latitude: location.latitude,
          longitude: location.longitude,
          address: location.address,
          name: location.name,
        },
      });
    } catch (error) {
      console.error('Use location error:', error);
    }
  };

  // „Éó„É¨„Éº„Çπ„Çø„Ç§„Éó„Åã„Çâ„Ç¢„Ç§„Ç≥„É≥ÂèñÂæó
  const getIconForPlaceType = (placeType: string): string => {
    switch (placeType) {
      case 'address': return 'üìç';
      case 'poi': return 'üè™';
      case 'station': return 'üöâ';
      case 'landmark': return 'üóº';
      default: return 'üìç';
    }
  };

  // „Çø„Ç§„ÉóÂêçÂèñÂæó
  const getTypeLabel = (type: string): string => {
    switch (type) {
      case 'home': return 'Ëá™ÂÆÖ';
      case 'work': return 'ËÅ∑Â†¥';
      case 'favorite': return '„ÅäÊ∞ó„Å´ÂÖ•„Çä';
      case 'recent': return 'ÊúÄËøë‰ΩøÁî®';
      default: return '„Åù„ÅÆ‰ªñ';
    }
  };

  // „Çø„Ç§„Éó„Ç¢„Ç§„Ç≥„É≥ÂèñÂæó
  const getTypeIcon = (type: string): string => {
    switch (type) {
      case 'home': return 'üè†';
      case 'work': return 'üè¢';
      case 'favorite': return '‚≠ê';
      case 'recent': return 'üïê';
      default: return 'üìç';
    }
  };

  if (loading) {
    return (
      <SafeAreaView style={styles.container}>
        <GoHeader
          title="„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆÂ†¥ÊâÄ"
          showBack={true}
          onBack={() => navigation.goBack()}
        />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={GoTheme.colors.primary} />
          <Text style={styles.loadingText}>Â†¥ÊâÄ„ÇíË™≠„ÅøËæº„Åø‰∏≠...</Text>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={styles.container}>
      <GoHeader
        title="„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆÂ†¥ÊâÄ"
        showBack={true}
        onBack={() => navigation.goBack()}
      />

      <ScrollView
        style={styles.scrollView}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={handleRefresh} />
        }
        showsVerticalScrollIndicator={false}>
        
        {/* ËøΩÂä†„Éú„Çø„É≥ */}
        <View style={styles.addButtonContainer}>
          <GoButton
            variant="primary"
            size="medium"
            onPress={() => setShowAddForm(true)}
            fullWidth={false}>
            + Êñ∞„Åó„ÅÑÂ†¥ÊâÄ„ÇíËøΩÂä†
          </GoButton>
        </View>

        {/* Â†¥ÊâÄËøΩÂä†„Éï„Ç©„Éº„É† */}
        {showAddForm && (
          <GoCard style={styles.addFormCard}>
            <Text style={styles.addFormTitle}>Êñ∞„Åó„ÅÑÂ†¥ÊâÄ„ÇíËøΩÂä†</Text>
            
            {/* Ê§úÁ¥¢ */}
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Â†¥ÊâÄ„ÇíÊ§úÁ¥¢</Text>
              <TextInput
                style={styles.textInput}
                value={searchQuery}
                onChangeText={(text) => {
                  setSearchQuery(text);
                  handleSearch(text);
                }}
                placeholder="‰ΩèÊâÄ„ÇÑÂ†¥ÊâÄÂêç„ÅßÊ§úÁ¥¢..."
                placeholderTextColor={GoTheme.colors.textSecondary}
                autoCapitalize="none"
              />
              {searchLoading && (
                <ActivityIndicator 
                  size="small" 
                  color={GoTheme.colors.primary} 
                  style={styles.searchLoader}
                />
              )}
            </View>

            {/* Ê§úÁ¥¢ÁµêÊûú */}
            {searchResults.length > 0 && (
              <View style={styles.searchResultsContainer}>
                {searchResults.map((result, index) => (
                  <TouchableOpacity
                    key={index}
                    style={styles.searchResultItem}
                    onPress={() => handleSearchResultSelect(result)}>
                    <Text style={styles.searchResultIcon}>
                      {getIconForPlaceType(result.place_type)}
                    </Text>
                    <View style={styles.searchResultInfo}>
                      <Text style={styles.searchResultName}>{result.name}</Text>
                      <Text style={styles.searchResultAddress}>{result.address}</Text>
                    </View>
                  </TouchableOpacity>
                ))}
              </View>
            )}

            {/* Â†¥ÊâÄÂêç */}
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Â†¥ÊâÄÂêç *</Text>
              <TextInput
                style={[styles.textInput, errors.name && styles.textInputError]}
                value={formData.name}
                onChangeText={(text) => setFormData(prev => ({...prev, name: text}))}
                placeholder="‰æã: Ëá™ÂÆÖ„ÄÅËÅ∑Â†¥„ÄÅ„Çà„ÅèË°å„Åè„Ç´„Éï„Çß"
                placeholderTextColor={GoTheme.colors.textSecondary}
              />
              {errors.name && <Text style={styles.errorText}>{errors.name}</Text>}
            </View>

            {/* ‰ΩèÊâÄ */}
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>‰ΩèÊâÄ *</Text>
              <TextInput
                style={[styles.textInput, errors.address && styles.textInputError]}
                value={formData.address}
                onChangeText={(text) => setFormData(prev => ({...prev, address: text}))}
                placeholder="Êù±‰∫¨ÈÉΩÊ∏ØÂå∫ÈùíÂ±±1-1-1"
                placeholderTextColor={GoTheme.colors.textSecondary}
                multiline
              />
              {errors.address && <Text style={styles.errorText}>{errors.address}</Text>}
            </View>

            {/* „Çø„Ç§„ÉóÈÅ∏Êäû */}
            <View style={styles.formGroup}>
              <Text style={styles.formLabel}>Á®ÆÈ°û</Text>
              <View style={styles.typeSelection}>
                {[
                  { value: 'home', label: 'Ëá™ÂÆÖ', icon: 'üè†' },
                  { value: 'work', label: 'ËÅ∑Â†¥', icon: 'üè¢' },
                  { value: 'favorite', label: '„ÅäÊ∞ó„Å´ÂÖ•„Çä', icon: '‚≠ê' },
                ].map((type) => (
                  <TouchableOpacity
                    key={type.value}
                    style={[
                      styles.typeOption,
                      formData.type === type.value && styles.typeOptionSelected,
                    ]}
                    onPress={() => setFormData(prev => ({
                      ...prev, 
                      type: type.value as any,
                      icon: type.icon,
                    }))}>
                    <Text style={styles.typeOptionIcon}>{type.icon}</Text>
                    <Text style={[
                      styles.typeOptionText,
                      formData.type === type.value && styles.typeOptionTextSelected,
                    ]}>
                      {type.label}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>

            {/* „Éú„Çø„É≥ */}
            <View style={styles.formButtons}>
              <GoButton
                variant="secondary"
                size="medium"
                onPress={() => {
                  setShowAddForm(false);
                  resetForm();
                }}>
                „Ç≠„É£„É≥„Çª„É´
              </GoButton>
              <GoButton
                variant="primary"
                size="medium"
                onPress={handleSaveLocation}>
                ‰øùÂ≠ò
              </GoButton>
            </View>
          </GoCard>
        )}

        {/* Â†¥ÊâÄ‰∏ÄË¶ß */}
        {locations.length === 0 ? (
          <GoCard style={styles.emptyCard}>
            <Text style={styles.emptyIcon}>üìç</Text>
            <Text style={styles.emptyTitle}>„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆÂ†¥ÊâÄ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</Text>
            <Text style={styles.emptyText}>
              „Çà„ÅèË°å„ÅèÂ†¥ÊâÄ„ÇíÁôªÈå≤„Åô„Çã„Å®„ÄÅ‰∫àÁ¥ÑÊôÇ„Å´Á∞°Âçò„Å´ÈÅ∏Êäû„Åß„Åç„Åæ„Åô
            </Text>
          </GoCard>
        ) : (
          locations.map((location) => (
            <GoCard key={location.id} style={styles.locationCard}>
              <View style={styles.locationHeader}>
                <View style={styles.locationIcon}>
                  <Text style={styles.locationIconText}>
                    {location.icon || getTypeIcon(location.type)}
                  </Text>
                </View>
                <View style={styles.locationInfo}>
                  <View style={styles.locationTitleRow}>
                    <Text style={styles.locationName}>{location.name}</Text>
                    {location.is_primary && (
                      <View style={styles.primaryBadge}>
                        <Text style={styles.primaryBadgeText}>„É°„Ç§„É≥</Text>
                      </View>
                    )}
                  </View>
                  <Text style={styles.locationAddress}>{location.address}</Text>
                  <View style={styles.locationMeta}>
                    <Text style={styles.locationMetaText}>
                      {getTypeLabel(location.type)} ‚Ä¢ ‰ΩøÁî®ÂõûÊï∞: {location.usage_count}Âõû
                    </Text>
                  </View>
                </View>
              </View>

              <View style={styles.locationActions}>
                <TouchableOpacity
                  style={styles.actionButton}
                  onPress={() => handleUseLocation(location)}>
                  <Text style={styles.actionButtonText}>‰ΩøÁî®</Text>
                </TouchableOpacity>
                
                {(location.type === 'home' || location.type === 'work') && !location.is_primary && (
                  <TouchableOpacity
                    style={styles.actionButton}
                    onPress={() => handleSetPrimary(location)}>
                    <Text style={styles.actionButtonText}>„É°„Ç§„É≥Ë®≠ÂÆö</Text>
                  </TouchableOpacity>
                )}
                
                <TouchableOpacity
                  style={[styles.actionButton, styles.deleteButton]}
                  onPress={() => handleDeleteLocation(location)}>
                  <Text style={styles.deleteButtonText}>ÂâäÈô§</Text>
                </TouchableOpacity>
              </View>
            </GoCard>
          ))
        )}
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: GoTheme.colors.background,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.textSecondary,
    marginTop: GoTheme.spacing.sm,
  },
  scrollView: {
    flex: 1,
  },
  addButtonContainer: {
    paddingHorizontal: GoTheme.spacing.md,
    paddingTop: GoTheme.spacing.md,
    alignItems: 'center',
  },
  addFormCard: {
    marginHorizontal: GoTheme.spacing.md,
    marginTop: GoTheme.spacing.md,
  },
  addFormTitle: {
    ...GoTheme.typography.h4,
    color: GoTheme.colors.text,
    marginBottom: GoTheme.spacing.md,
    fontWeight: 'bold',
  },
  formGroup: {
    marginBottom: GoTheme.spacing.md,
  },
  formLabel: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.text,
    marginBottom: GoTheme.spacing.xs,
    fontWeight: '600',
  },
  textInput: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.text,
    backgroundColor: GoTheme.colors.surface,
    borderWidth: 1,
    borderColor: GoTheme.colors.border,
    borderRadius: GoTheme.borderRadius.sm,
    paddingHorizontal: GoTheme.spacing.md,
    paddingVertical: GoTheme.spacing.sm,
    minHeight: 48,
  },
  textInputError: {
    borderColor: GoTheme.colors.error,
  },
  errorText: {
    ...GoTheme.typography.bodySmall,
    color: GoTheme.colors.error,
    marginTop: GoTheme.spacing.xs,
  },
  searchLoader: {
    position: 'absolute',
    right: GoTheme.spacing.md,
    top: 36,
  },
  searchResultsContainer: {
    backgroundColor: GoTheme.colors.surface,
    borderRadius: GoTheme.borderRadius.sm,
    borderWidth: 1,
    borderColor: GoTheme.colors.border,
    maxHeight: 200,
    marginBottom: GoTheme.spacing.md,
  },
  searchResultItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: GoTheme.spacing.md,
    paddingVertical: GoTheme.spacing.sm,
    borderBottomWidth: 1,
    borderBottomColor: GoTheme.colors.divider,
  },
  searchResultIcon: {
    fontSize: 20,
    marginRight: GoTheme.spacing.sm,
  },
  searchResultInfo: {
    flex: 1,
  },
  searchResultName: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.text,
    fontWeight: '600',
  },
  searchResultAddress: {
    ...GoTheme.typography.bodySmall,
    color: GoTheme.colors.textSecondary,
  },
  typeSelection: {
    flexDirection: 'row',
    gap: GoTheme.spacing.sm,
  },
  typeOption: {
    flex: 1,
    alignItems: 'center',
    paddingVertical: GoTheme.spacing.md,
    borderWidth: 1,
    borderColor: GoTheme.colors.border,
    borderRadius: GoTheme.borderRadius.sm,
  },
  typeOptionSelected: {
    backgroundColor: GoTheme.colors.primary,
    borderColor: GoTheme.colors.primary,
  },
  typeOptionIcon: {
    fontSize: 24,
    marginBottom: GoTheme.spacing.xs,
  },
  typeOptionText: {
    ...GoTheme.typography.bodySmall,
    color: GoTheme.colors.text,
  },
  typeOptionTextSelected: {
    color: GoTheme.colors.textOnPrimary,
    fontWeight: '600',
  },
  formButtons: {
    flexDirection: 'row',
    gap: GoTheme.spacing.md,
    marginTop: GoTheme.spacing.md,
  },
  emptyCard: {
    marginHorizontal: GoTheme.spacing.md,
    marginTop: GoTheme.spacing.md,
    alignItems: 'center',
    paddingVertical: GoTheme.spacing.xl,
  },
  emptyIcon: {
    fontSize: 48,
    marginBottom: GoTheme.spacing.md,
  },
  emptyTitle: {
    ...GoTheme.typography.h4,
    color: GoTheme.colors.text,
    marginBottom: GoTheme.spacing.sm,
    fontWeight: 'bold',
  },
  emptyText: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.textSecondary,
    textAlign: 'center',
  },
  locationCard: {
    marginHorizontal: GoTheme.spacing.md,
    marginTop: GoTheme.spacing.md,
  },
  locationHeader: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: GoTheme.spacing.md,
  },
  locationIcon: {
    width: 48,
    height: 48,
    backgroundColor: GoTheme.colors.primaryLight + '20',
    borderRadius: 24,
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: GoTheme.spacing.md,
  },
  locationIconText: {
    fontSize: 24,
  },
  locationInfo: {
    flex: 1,
  },
  locationTitleRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  locationName: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.text,
    fontWeight: 'bold',
    flex: 1,
  },
  primaryBadge: {
    backgroundColor: GoTheme.colors.accent,
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 10,
  },
  primaryBadgeText: {
    ...GoTheme.typography.caption,
    color: GoTheme.colors.textOnPrimary,
    fontWeight: '600',
  },
  locationAddress: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.textSecondary,
    marginBottom: 8,
  },
  locationMeta: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  locationMetaText: {
    ...GoTheme.typography.bodySmall,
    color: GoTheme.colors.textSecondary,
  },
  locationActions: {
    flexDirection: 'row',
    gap: GoTheme.spacing.sm,
  },
  actionButton: {
    flex: 1,
    paddingVertical: GoTheme.spacing.sm,
    backgroundColor: GoTheme.colors.surface,
    borderWidth: 1,
    borderColor: GoTheme.colors.border,
    borderRadius: GoTheme.borderRadius.sm,
    alignItems: 'center',
  },
  actionButtonText: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.primary,
    fontWeight: '600',
  },
  deleteButton: {
    borderColor: GoTheme.colors.error,
    maxWidth: 80,
  },
  deleteButtonText: {
    ...GoTheme.typography.body,
    color: GoTheme.colors.error,
    fontWeight: '600',
  },
});